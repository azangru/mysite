{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/becoming-web-developer/","webpackCompilationHash":"b160149996a6f087bc4a","result":{"data":{"site":{"siteMetadata":{"title":"My personal site"}},"markdownRemark":{"id":"c7e87d2a-637b-58e4-897c-3601ffddffba","html":"<h2>The Story</h2>\n<p>We all have our stories of how we ended up doing what we do. Here is mine.</p>\n<p>I started late (an ever-present reason to feel guilty for being so hesitant and slow).\nI got my own personal computer when I was 16; and for a long time regarded programming\nas something extremely clever approachable only to the mathematically minded. I remember\nthinking longingly, around the time I graduated from the high school, how awfully smart were\nthe guys who were about to enter the School of Computational Mathematics and Cybernetics\nat the Moscow State University. Myself, I went to a medical school. I had been preparing\nfor it for two years, and at the time it seemed like the only practical option.</p>\n<p>I pivoted twice exploring what I wanted to do with my life. The first pivot happened a couple of\nyears after I graduated from the medical school (yes, I completed all six years of medical\ntraining, slowly realizing that I had no intention of practicing medicine). I was\nworking at a genetics laboratory in Denmark, going through the depressing everyday routine of\nmixing solutions for molecular reactions and getting frustrated by experiment after unsuccessful\nexperiment. That was the time when I first dabbled with web development. Our university\nhad a free license for <em>Adobe GoLive</em> (it was 2004, I believe); our laboratory needed\na web page; so I tried to put something together. The result was pretty horrible.\nLuckily, it never went online.</p>\n<p>My main distraction from the depressingly unsuccessful lab work at that time was translation.\nI had started translating medical texts from English into Russian while still studying at the med school,\nbut I had also begun translating fiction (thanks to Ekaterina Dobrohotova-Maikova, who encouraged\nmy early attempts, and to Vladimir Bakanov, who gave me books to translate). So by the time I\neventually snapped and quit the lab, my ambition was to translate. And for that,\nI thought, I needed a proper training. A training in the humanities, and especially\nin my native language that I was translating into, i.e. in Russian. So I went ahead\nand applied to the School of Philology at the Moscow State University, department of the Russian\nlanguage and Russian literature. To my amazement and delight, I was accepted.</p>\n<p>That, I realize in retrospect, was a mistake. An education in linguistics improves\none’s understanding of how language works, and disabuses one of various common misconceptions,\nbut does very little in terms of improving one’s translation skills. Instead of spending five rather\ninteresting years in studies of various aspects of the Russian language and the history of the\nRussian literature, as I ended up doing, I could have probably discovered my passion for programming much\nearlier. Sadly, by now, five years after graduation, I have forgotten most of whatever philology\nI learned, and am reminded of that period mostly by nightmares, in which I am about to take\nan exam on literature, but had not read a thing.</p>\n<p>This brings me to my second pivot. Looking back, I recognize it for the trivial cliché that is was,\nbut at the time I was blissfully unaware that this was exactly what numerous unsatisfied\nmiddle-aged people were doing. Still, looking back at it, it feels surreal, and I can hardly believe\nI managed to pull it off. Working part-time as a proofreader for a digital agency, I learned about\na company they had once been partners with, called <em>General Assembly.</em> General Assembly had\nestablished a number of coding bootcamps internationally, and was advertising its Web Development\ncourses. Among various campuses there was one in London, to which I applied and — miraculously —\ngot accepted. Another miracle happened at the British border, due to an irregularity in my papers.\nThe thing was that General Assembly, being a private company and not an academic institution,\nwas not in a position to support me in receiving an academic visa, while a regular tourist visa\nhad a (then unknown to me) limitation regarding the number of days one could study while in Britain.\nThe limit was 30 days, while the bootcamp’s duration was 3 months. All that I learned in an\ninterrogation room at a British airport. Incredibly, unbelievably I was let through,\nwith a stern warning never to do so again.</p>\n<p>So, from April to July 2014 I studied at General Assembly’s Web Development Immersive program\ndesigned to prepare full-stack web developers. It started with backend development,\nfocusing on ruby and the Ruby-on-Rails framework, and then proceeded to frontend development,\nteaching us some JavaScript, Coffeescript, jQuery, Underscore.js, and, as a finishing touch, a\nlittle bit of Backbone.js. Those were perhaps the happiest months in my life. I was in London,\na place where I had most wished to be, hearing people speak the language I most wished to hear,\nlearning a new profession that promised to be empowering, challenging, and well-paid.\nIt was only when I returned to Russia and started applying to jobs and getting rejected\nthat I realized how little I knew and how junior a developer I was. “We are not looking\nfor junior developers,” was a standard reply. So I was relieved when I finally received\nan offer from a small startup working on a script that could be embedded in other\nsites and would show an invitation to share the web page after the user would do\na certain action (such as scroll to the end of the page or click on a link to navigate\naway from the page). Yes, that sounds pretty awful and intrusive, and something that\nI as a visitor to that web site would not appreciate, I know; and for that I am sorry.\nOn the plus side though I did get some real-world experience. I am also happy to report\nthat that particular project has since gone out of business.</p>\n<p>My work at that startup, as well as my… should I say remote internship, for the lack\nof a better word, at a US-based company <em>EHR.works,</em> made me realize that I needed — no, I\nwanted — to learn more JavaScript; that the training I got at the bootcamp was very\nmuch insufficient, and that some seriously interesting stuff was happening in frontend\ndevelopment, which was constantly changing and becoming more and more logic-intensive.\nSo in the summer of 2015 I took another three-month course at a coding bootcamp — this\ntime remotely and focusing exclusively on JavaScript development.</p>\n<p>The training I received at that second bootcamp, US-based <em>Hack Reactor</em>, along with\nthe experience I got during my first junior year, allowed me to get a job as a frontend\ndeveloper first at <em>Rutube</em> (a Russian video streaming company, which at some point\nviewed itself as a direct competitor of Youtube; hence the name), and then at\n<em>Bookmate,</em> where I am currently employed.</p>\n<h2>Lessons from Studying at Coding Bootcamps</h2>\n<blockquote>\n<p>Did DBC [Dev Bootcamp] give me an education equivalent to a computer science degree? No.<br>\nDid they teach me everything I need to know about data structures and algorithms? No.<br>\nDid they help me get my first programming job? Sort of, but not really.<br>\nBut I did learn an enormous amount of practical knowledge in a very short time…</p>\n</blockquote>\n<blockquote>\n<p>(from a <a href=\"https://news.ycombinator.com/item?id=14761485\">discussion</a> at Hacker News)</p>\n</blockquote>\n<h3>Web Development Immersive at General Assembly</h3>\n<h4>What has it taught me?</h4>\n<p>Web Development Immersive was my true introduction into programming.\nI had taken some online courses before, such as CS50 on EdX, or some Python courses on\nEdX and Coursera, but I still was extremely new to software development when I\njoined Web Development Immersive. Looking back now, I think of it as a foundational\ncourse, where I learned the basics of programming, a server-side language and a\nclient-side language, principles of the MVC architecture, and the beauty of having\na mature framework (such as Ruby on Rails) that takes care of your common development needs.</p>\n<h4>What has it NOT taught me?</h4>\n<p>By the end of the course, I was not aware of the depth of my ignorance. I did\nnot have any devops/sysadmin training (apart from using a service such as Heroku).\nI had no idea about mobile web development, and was not even trained to think\nabout mobile as a platform with its own specific requirements. I knew next to nothing about\ntesting (just that it was supposed to be useful; we had, overall, only about a day or so devoted\nto testing, so I was very confused on that subject). On the frontend side,\nI knew how to use jQuery, underscore and SCSS, but not much else. I had very little\nknowledge of the native browser API, or of CSS methodologies. Most importantly, I had not had a chance\nto think about how to architect web applications, how to structure code, how to deal with\nthe pains of growing the code base, how to employ principles of object-oriented design,\nor what benefits might functional programming offer. Essentially, I only knew my (rather limited) way\naround a (basic) Rails app. And I thought I was such a hot shot!</p>\n<h3>Hack Reactor</h3>\n<p>A year after graduating from General Assembly’s Web Development Immersive, I applied\nto Hack Reactor’s remote program. By that time, I had had a chance to work on a couple\nof Rails apps and an Angular-based client-side app, been exposed to testing, and\nstarted watching conference talks pretty regularly. I was hoping this program would\nboth help me review the fundamentals and teach me the bleeding edge of JavaScript development.</p>\n<h3>What has it taught me?</h3>\n<p>Hack Reactor’s 12-week program is divided in half: the first 6 weeks, students study the\nsame materials and learn the fundamentals of JavaScript, as well as its main applications\non the client and on the server; the other half they apply this knowledge working on projects\nof their own choosing. We had a great time implementing basic data structures\nin JavaScript. We pair programmed every day, which I absolutely loved. Also, the learning\nprocess was tightly coupled with test-driven development: we were given exercises with\nspecs that needed to be implemented, and learned the concepts by writing code that would\nmake tests pass. Also, here I for the first time properly learned about Node, and Express,\nand D3.</p>\n<h3>What has it NOT taught me?</h3>\n<p>Although a great experience in general (10/10 would recommend, as they say on Reddit),\nHack Reactor was disappointingly conservative when it came to technologies that were\ntaught to the students. To my dismay, in summer 2015, the curriculum did not include ES6 and\nrelated tooling, or Typescript (which was gaining in popularity), but did have a module on\nCoffeescript (which seemed so 2013!). It did not include React (although it was already\ntaking the world by storm), or Polymer, or Angular 2 (which, admittedly, was still\nin alpha, but which, everyone knew, was coming), but did include Angular 1 (which,\neveryone knew, was on its way out). It did not specifically teach Webpack or npm scripts,\nbut did include Grunt. In other words, the curriculum was a couple years behind the\nbleeding edge, and to me that was painful.</p>\n<h2>Whither now?</h2>\n<p>It’s the end of 2017, and the trends that interest me the most (and in which I have\nvery little to no experience) are:</p>\n<ul>\n<li>Progressive Web Apps (or, to avoid marketing terms, the modern mobile web in general),\nwhich try to solve the performance problem of web applications on mobile.\nThe exciting part about this direction is new browser api’s, such as service workers\nor web workers, as well as strategies for smarter delivery of static assets to the client.</li>\n<li>GraphQL, or making client-side apps completely in control of what they receive from\nthe server. I have been burned frequently enough by our ever-changing json api’s to\nwant to dive deeper into this.</li>\n<li>Type safety and functional programming. After a year of working with Backbone apps, and\nwith Rails apps before that, I tend to think in object-oriented terms. I appreciate\nclass instances as bundles of data co-located with methods operating on this data,\nbut I am also very much intrigued by the beauty of functional programming, and desperately\nwant the safety guarantees offered by statically typed languages. I am torn between\nthe beauty of Purescript, the practicality of Typescript, the ease of Flow, and the\nhype of ReasonML. At the same time, I recognize that each of those options will bring\ntheir own problems.</li>\n<li>Functional reactive programming, or programming with observables. This is tightly\nconnected to the previous point — just as functional programming, RxJS looks not only\ncrazy powerful, but <em>beautiful</em>, too.</li>\n</ul>\n<p>Painfully, these trends seem to go in their own different directions and not form a\nclear coherent story. Functional programming in JavaScript works well with reactive\nprogramming, but at the same time functional type-safe languages, such as ReasonML,\ndo not seem particularly interested in reactive programming. Progressive web apps\nrely on the native web platform as much as possible, to save on the size of JavaScript bundles,\nwhereas the functional school of thought dislikes the native solutions for being impure, non-\ncomposable and so on (dislike towards the native promises and async-await is a good example\nof this), and favors concepts implemented in additional libraries.</p>\n<p>All this is pretty confusing and exhausting, and contributing to the sense of JavaScript\nfatigue, but I still hope to get a chance to get deeper into all this.</p>","frontmatter":{"title":"Becoming a web developer","date":"17 September, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/becoming-web-developer/"}}}