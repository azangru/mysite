{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/about-the-site/","webpackCompilationHash":"fb180431034c6f3d838b","result":{"data":{"site":{"siteMetadata":{"title":"My personal site"}},"markdownRemark":{"id":"d03cbfc0-9946-5ba7-8ab5-a709a4719810","html":"<blockquote>\n<p>I wanna be the leader<br>\nI wanna be the leader<br>\nCan I be the leader?<br>\nCan I? Can I?<br>\nPromise? Promise?<br>\nYippee, I’m the leader<br>\nI’m the leader.<br>\nOk what shall we do now?</p>\n</blockquote>\n<blockquote>\n<p>— Roger McGouth; as quoted in Oxford Dictionary of Modern Quotations</p>\n</blockquote>\n<h2>The purpose</h2>\n<p>I have always wanted a web site that would be truly mine and where I would have complete\ncontrol over the content and the presentation. As opposed to blogging platforms or\nsocial networks, where the presentation options, such as the maximum number of characters per post,\nor allowed tags, or scripts, or embeds, are dictated by the platform, and the\ncontent is stored in a database elsewhere. And where users are treated as a product\nwhose attention is sold to advertisers.</p>\n<p>It has also become quite clear to me that I rather dislike social networks. They\ncertainly have their uses, and I would from time to time check out a Twitter account\nor five to see what’s going on in the world of web development, but I am mostly\na consumer, not a producer of such messages; I do not feel the urge to tell the world\nof my achievements or grievances, to participate in flash mobs, to feel a part of\na community and get dopamine hits from receiving likes or other forms of Bernian “stroking”.</p>\n<p>I do, however, like a relatively quiet place where I would have an opportunity to\norganize and examine my thoughts. For this purpose, a standalone site that hearkens\nback to the days of Web 1.0 (in the sense that it has no comments section, no interaction\nwith the visitors) is suited very well.</p>\n<h2>The “blog” and the “diary”</h2>\n<p>Although I could not confirm it by finding a formal description of a typical blog post,\nand although nothing in the word “blog” (derived, of course, from “web log”) suggests\nanything about the size of a blog entry, it seems the convention is that blogs are\na genre of medium-to-large length. After all, someone felt the need to come up with\nthe word <em>microblog</em> to indicate that its entries are going to be shorter than a typical blog post.</p>\n<p>To this effect, I’ve decided to have a separate <a href=\"/mysite/blog/\">blog</a> section for longer\nexpository or argumentative pieces, and a <a href=\"/mysite/diary/\">diary</a> section for short entries\nwhich it takes no mental effort to add. Judging by what tends to end up in\nthe diary section, its main purpose is to keep links to sites that caught my attention.</p>\n<h2>Colophon, or some words on the tech stack</h2>\n<p>This site was initially built in 2014 using <a href=\"https://middlemanapp.com/\">Middleman</a>.\nI chose Middleman, because it was based on Ruby (the language I was most familiar with\nat the time), was conceptually reminiscent of Ruby on Rails (assets pipeline, erb templates),\nand overall looked pretty powerful — it was marketed as an instrument for building\ngeneral-purpose static web sites, not just blogs (as was Jekyll’s pitch).\nMiddleman also supported multilanguage sites, and it was my fancy at the moment to keep\nmy site bilingual, both in English and in Russian. Turned out, I needn’t have worried\nabout multilingual support; I never cared to build the Russian version of the site anyway.</p>\n<p>Some time later (was it in 2015?) I updated Middleman to version 4, which introduced\nwhat it called an external assets pipeline, so that JavaScript and styles no longer had\nto be processed by Ruby gems and could be compiled in the more familiar, best-practice\nway, using Webpack. That gave more freedom to choose appropriate frontend technologies.</p>\n<p>The next logical step was to ditch the Ruby-based static-site generator altogether, and move solely\nto JavaScript. Contributing to this decision was the mildly annoying fact that Middleman had\nan opinion about the folder structure of the project — the arrangement of files in the\nsource folder should directly map the output of the folder to which the site is eventually built.\nSo if you wanted to organize the files corresponding to individual routes into a separate <code class=\"language-text\">views</code>\nfolder, you were out of luck. Judging by the fact that Thoughtbot devised a\n<a href=\"https://github.com/thoughtbot/proteus-middleman/blob/50b3e0d6987e4e0f9cce2e057be77b6672059c52/extensions/views.rb\">workaround</a>\nfor this specific behavior, I was not the only one who found this not to my taste.\n(By the way, the workaround broke things after the update to Middleman version 4, so there).</p>\n<p>So I re-wrote the site in <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>, a fantastic and very tweakable\nstatic-site generator that uses React to generate pages and a graphQL\nlayer to fetch the data required by individual React components during the build step.\nFor styling, I moved from SCSS (which I quickly turned into a mess) to styled components\nthat conveniently co-locate styles with the React components that use them.</p>","frontmatter":{"title":"About this site (purpose, tech stack, etc.)","date":"12 July, 2017"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/about-the-site/"}}}